import pickle
import numpy as np
from scipy.spatial import distance

def gaussian(x,m,sigma):
    return np.exp((-(distance.euclidean(x,m)**2)/(2*sigma**2)))

def mean(a):
    return sum(a) / len(a)

def rbf_function(train_cluster, train_data):
    data_cluster = [[] for x in xrange(1000)]

    for cluster in train_cluster:
        data_cluster[cluster].append((train_data['data'][cluster]).tolist())

    mean_vector = [[] for x in xrange(1000)]
    dists = [[] for x in range(1000)]
    sd = []

    print "Generating mean vectors..."
    for i in range(0,len(data_cluster)):
        mean_vector[i].append(map(mean, zip(*data_cluster[i])))

    print "Generating standard deviation..."
    for i in range(0,1000):
        for j in range(0,1000):

            distances = distance.euclidean(mean_vector[i],mean_vector[j])
            dists[i].append(distances)
        sd.append(sorted(dists[i])[1])
    return mean_vector, sd

def transform(dataset):
    transformed = [[] for x in xrange(len(dataset['data']))]
    k=0
    for data in dataset['data']:
        l = []
        for i in range(0,1000):
            l.append(gaussian(data, mean_vector[i], sd[i]).item())
        transformed[k].append(l)
        k+=1

    t = {}

    t['data'] = np.squeeze(np.array(transformed))
    t['target'] = dataset['target']

    return t

train_cluster = pickle.load(open( 'Kmean_cluster.pkl', 'rb' ))
train_data=pickle.load(open( "train_PCA.pkl", "rb" ))
test_data=pickle.load(open( "test_PCA.pkl", "rb" ))

print train_cluster.size
print len(train_data['data'])
print len(test_data['data'])

#please do not re-generate the file 
#from sklearn.cluster import KMeans
#generated by KMeans(n_clusters=1000,init='random', random_state=10).fit(train_data['data'])

mean_vector = [[] for x in xrange(1000)]
sd = []

mean_vector, sd = rbf_function(train_cluster, train_data)

train_RBF = {}
train_RBF = transform(train_data)
print train_RBF

print "Transforming training data..."
with open('train_RBF.pkl', 'wb') as handle:
    pickle.dump(train_RBF, handle, protocol=pickle.HIGHEST_PROTOCOL)

test_RBF = {}
test_RBF = transform(test_data)
print test_RBF

print "Transforming test data..."
with open('test_RBF.pkl', 'wb') as handle:
    pickle.dump(test_RBF, handle, protocol=pickle.HIGHEST_PROTOCOL)
